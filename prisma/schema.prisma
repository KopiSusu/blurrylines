generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model profiles {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_user_id       String         @unique @db.Uuid
  username           String?
  full_name          String?
  email              String?        @unique
  avatar_url         String?
  stripe_customer_id String?        @unique
  previews           previews[]
  subscription       subscriptions? @relation(fields: [stripe_customer_id], references: [stripe_customer_id])

  @@index([stripe_customer_id])
}

model subscriptions {
  created_at             DateTime  @default(now())
  email                  String?   @unique
  end_at                 DateTime?
  stripe_customer_id     String    @id @unique
  stripe_subscription_id String?   @unique
  profile                profiles?

  @@index([stripe_subscription_id, stripe_customer_id])
}

model previews {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id               String?        @unique
  removal_task_id       String?        @unique
  generated_url         String?
  generated_image_path  String?
  original_url          String
  original_image_path   String
  preview_url           String?
  preview_image_path    String?
  width                 BigInt
  height                BigInt
  prompt                String
  status                preview_status @default(PENDING)
  created_at            DateTime       @default(now())
  updated_at            DateTime       @default(now()) @updatedAt
  profile_id            String         @db.Uuid
  profile               profiles       @relation(fields: [profile_id], references: [id])

  @@index([task_id, removal_task_id])
}

enum preview_status {
  PENDING
  REMOVING
  SUCCEED
  FAILED
  COMPLETED
}

enum task_statuses {
  UNKNOWN
  QUEUING
  TRAINING
  SUCCESS
  CANCELED
  FAILED
}

enum model_statuses {
  DEPLOYING
  SERVING
}
